#namespace Account
#description Provides a set of methods for the wrapper of GET/POST account.

endpoint UserResponse VerifyCredentials : Get account/verify_credentials
{
    description
    {
        Returns a representation of the requesting user if authentication was successful.
    }
    returns
    {
        The user object.
    }
    params
    {
        optional bool include_entities
        optional bool skip_status
        optional bool include_email
        optional bool include_ext_alt_text
    }
}

endpoint Setting Settings : Impl
{
    description
    {
        Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings.
    }
    returns
    {
        The settings of the user.
    }
    params
    {
        optional int trend_location_woeid
        optional bool sleep_time_enabled
        optional int start_sleep_time
        optional int end_sleep_time
        optional string time_zone
        optional string lang
        optional string allow_contributor_request
        optional string current_password
        optional string allow_dms_from
    }
}

#raw
#if !ASYNC_ONLY
private Setting SettingsImpl(IEnumerable<KeyValuePair<string, object>> parameters)
{
    var param = parameters.ToArray();
    return this.Tokens.AccessApiImpl<Setting>(param.Any() ? MethodType.Post : MethodType.Get, "account/settings", param, "");
}
#endif
#if !NET35
private Task<Setting> SettingsAsyncImpl(IEnumerable<KeyValuePair<string, object>> parameters, CancellationToken cancellationToken)
{
    var param = parameters.ToArray();
    return this.Tokens.AccessApiAsyncImpl<Setting>(param.Any() ? MethodType.Post : MethodType.Get, "account/settings", param, cancellationToken, "");
}
#endif
#endraw

endpoint void UpdateDeliveryService : Post account/update_delivery_service
{
    description
    {
        Sets which device Twitter delivers updates to for the authenticating user.
    }
    params
    {
        required string device
        optional bool include_entities
    }
    returns
    {
        The task object representing the asynchronous operation will be returned in async methods. In other methods, nothing.
    }
}

endpoint UserResponse UpdateProfile : Post account/update_profile
{
    description
    {
        Sets values that users are able to set under the "Account" tab of their settings page.
    }
    params
    {
        optional string name
        optional string url
        optional string location
        optional string description
        optional bool include_entities
        optional bool skip_status
        optional bool include_ext_alt_text
    }
    returns
    {
        The user object.
    }
}

endpoint UserResponse UpdateProfileBackgroundImage : Post account/update_profile_background_image
{
    description
    {
        Updates the authenticating userâ€™s profile background image.
        Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.
    }
    params
    {
        either Stream image
        either IEnumerable<byte> image
        either FileInfo image when !(PCL || WIN_RT)
        either
        optional bool tile
        optional bool include_entities
        optional bool skip_status
        optional bool include_ext_alt_text
        optional long media_id
    }
    returns
    {
        The user object.
    }
}

endpoint void UpdateProfileBanner : Post account/update_profile_banner
{
    description
    {
        Uploads a profile banner on behalf of the authenticating user.
    }
    params
    {
        either Stream image
        either IEnumerable<byte> image
        either FileInfo image when !(PCL || WIN_RT)
        either string banner
        optional string width
        optional string height
        optional string offset_left
        optional string offset_top
    }
}

endpoint void RemoveProfileBanner : Post account/remove_profile_banner
{
    description
    {
        Removes the uploaded profile banner for the authenticating user.
    }
}

endpoint UserResponse UpdateProfileColors : Post account/update_profile_colors
{
    description
    {
        Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com.
        Each parameter's value must be a valid hexidecimal value, and may be either three or six characters (ex: &#35;fff or &#35;ffffff).
    }
    params
    {
        optional string profile_background_color
        optional string profile_link_color
        optional string profile_sidebar_border_color
        optional string profile_sidebar_fill_color
        optional string profile_text_color
        optional bool include_entities
        optional bool skip_status
        optional bool include_ext_alt_text
    }
    returns
    {
        The user object.
    }
}

endpoint UserResponse UpdateProfileImage : Post account/update_profile_image
{
    description
    {
        Updates the authenticating user's profile image.
    }
    params
    {
        either Stream image
        either IEnumerable<byte> image
        either FileInfo image when !(PCL || WIN_RT)
        optional bool include_entities
        optional bool skip_status
        optional bool include_ext_alt_text
    }
    returns
    {
        The user object.
    }
}
